version: '3'

services:
  nginx:
    build:
      context: ./images/nginx
      dockerfile: Dockerfile
    deploy:
        resources:
            limits:
              cpus: '0.50'
              memory: 512M
            reservations:
              cpus: '0.25'
              memory: 128M
    tty: true
    restart: unless-stopped
    ports:
      - ${APP_PORT}:80
    links:
      - php-fpm
    volumes:
      - ./src:/var/www/html:ro
      # - ./data/media:/var/www/html/pub/media:ro
    container_name: ${PROJECT}-nginx
    networks:
      - ${PROJECT}-net

  php-fpm:
    # image: secomm/php:8.1-fpm-magento
    build:
      context: ./images/php
      dockerfile: Dockerfile
    tty: true
    user: ${USER_PHP}
    restart: unless-stopped
    links:
      - db
      - redis
      - es
    env_file:
      - .env.default
    volumes:
      - ./.composer:/home/${USER}/.composer
      - ./src:/var/www/html:consistent
      # - ./data/media:/var/www/html/pub/media:consistent
    container_name: ${PROJECT}-php
    networks:
      - ${PROJECT}-net

  es:
    image: elasticsearch:7.17.5
    expose:
      - "9200"
      - "9300"
    environment:
      - http.host=0.0.0.0
      - transport.host=127.0.0.1
      - cluster.name=es-cluster
      - path.data=/usr/share/elasticsearch/data
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
      - cluster.routing.allocation.disk.threshold_enabled=false ## Avoid test failures due to small disks.
      - bootstrap.memory_lock=true ## along with the memlock settings below, disables swapping
    mem_limit: 1g
    ulimits:
      memlock: 
        soft: -1
        hard: -1
    volumes:
      - ./images/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/elasticsearch.yml
      - esdata:/usr/share/elasticsearch/data
      # - ./backup/esdata:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD", "curl","-s" ,"-f", "http://localhost:9200/_cat/health"]
    container_name: ${PROJECT}-elasticsearch
    networks:
      - ${PROJECT}-net

  redis:
    image: redis:latest
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 64M
    command: redis-server /usr/local/etc/redis/redis.conf
    volumes:
      - ./images/redis/config/redis.conf:/usr/local/etc/redis/redis.conf
    healthcheck:
      test: 'redis-cli ping || exit 1'
      interval: 30s
      timeout: 30s
      retries: 3
    container_name: ${PROJECT}-redis
    networks:
      - ${PROJECT}-net
      
  db:
    image: mysql:8
    volumes:
      - ./backup/mysql:/docker-entrypoint-initdb.d
      - ./backup/mysql/db:/var/lib/mysql
      # - ./images/mysql/config/my.cnf:/etc/mysql/conf.d/custom.cnf
    env_file:
      - .env.default
    command: --explicit_defaults_for_timestamp=on
    healthcheck:
      test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost"]
      timeout: 20s
      retries: 10
    container_name: ${PROJECT}-mysql
    networks:
      - ${PROJECT}-net

  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: ${PROJECT}-pma
    depends_on:
      - db
    env_file:
      - .env.default
    restart: always
    ports:
      - ${PHPMYADMIN_PORT}:80
    volumes:
      - /sessions
    networks:
      - ${PROJECT}-net

  # varnish:
  #   build:
  #     context: .
  #     dockerfile: images/varnish/Dockerfile
  #   hostname: varnish
  #   ports:
  #     - "80:80"
  #   networks:
  #     - ${PROJECT}-network
  #   depends_on:
  #     - nginx
  #   volumes:
  #     - ./images/varnish/varnish6.vcl:/etc/varnish/default.vcl
  #     - ./images/varnish/varnish.secret:/etc/varnish/secret
  #   environment:
  #     - CACHE_SIZE=64M

volumes:
  esdata:
    driver: local

networks:
  ${PROJECT}-net:
    driver: bridge
